
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace ChemControl_stan_mod07_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 131> locations_array__ = 
{" (found before start of program)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 16, column 3 to column 19)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 17, column 3 to column 28)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 18, column 3 to column 36)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 19, column 3 to column 37)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 20, column 3 to column 40)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 21, column 3 to column 43)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 22, column 3 to column 40)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 23, column 3 to column 39)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 24, column 3 to column 40)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 28, column 4 to column 52)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 29, column 4 to column 44)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 30, column 4 to column 38)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 31, column 4 to column 59)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 32, column 4 to column 56)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 33, column 4 to column 46)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 34, column 4 to column 57)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 39, column 12 to column 70)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 40, column 12 to column 83)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 41, column 12 to column 76)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 42, column 12 to column 77)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 38, column 28 to line 43, column 9)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 38, column 8 to line 43, column 9)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 37, column 27 to line 44, column 5)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 37, column 4 to line 44, column 5)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 47, column 4 to column 44)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 48, column 4 to column 45)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 49, column 4 to column 48)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 53, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 54, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 55, column 4 to column 31)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 56, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 57, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 58, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 59, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 61, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 62, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 63, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 64, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 65, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 66, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 67, column 4 to column 30)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 71, column 8 to column 34)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 72, column 8 to column 35)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 73, column 8 to column 38)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 74, column 8 to column 41)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 75, column 8 to column 38)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 76, column 8 to column 37)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 77, column 8 to column 38)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 80, column 12 to column 26)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 81, column 12 to column 27)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 82, column 12 to column 26)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 83, column 12 to column 27)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 84, column 12 to column 26)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 85, column 12 to column 25)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 86, column 12 to column 23)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 87, column 12 to column 23)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 88, column 12 to column 22)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 89, column 12 to column 22)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 91, column 12 to column 35)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 92, column 12 to column 35)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 93, column 12 to column 35)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 94, column 12 to column 35)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 95, column 12 to column 23)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 96, column 12 to column 22)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 97, column 12 to column 36)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 100, column 16 to column 114)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 101, column 16 to column 72)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 103, column 16 to column 94)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 105, column 16 to column 74)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 106, column 16 to column 100)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 112, column 20 to column 58)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 113, column 20 to column 110)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 111, column 23 to line 114, column 17)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 109, column 20 to column 57)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 110, column 20 to column 108)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 108, column 37 to line 111, column 17)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 108, column 16 to line 114, column 17)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 116, column 16 to column 67)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 117, column 16 to column 69)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 99, column 32 to line 119, column 13)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 99, column 12 to line 119, column 13)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 79, column 28 to line 120, column 9)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 79, column 8 to line 120, column 9)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 70, column 27 to line 121, column 5)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 70, column 4 to line 121, column 5)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 2, column 4 to column 25)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 3, column 4 to column 25)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 4, column 4 to column 27)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 5, column 32 to column 41)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 5, column 43 to column 50)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 5, column 52 to column 59)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 5, column 4 to column 61)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 6, column 33 to column 42)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 6, column 44 to column 51)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 6, column 53 to column 60)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 6, column 4 to column 62)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 7, column 36 to column 45)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 7, column 47 to column 54)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 7, column 56 to column 63)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 7, column 4 to column 65)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 11, column 3 to column 19)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 12, column 3 to column 35)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 18, column 10 to column 19)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 18, column 21 to column 28)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 19, column 10 to column 19)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 19, column 21 to column 28)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 20, column 10 to column 19)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 20, column 21 to column 28)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 21, column 10 to column 19)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 21, column 21 to column 28)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 22, column 10 to column 19)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 22, column 21 to column 28)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 23, column 10 to column 19)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 23, column 21 to column 28)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 24, column 10 to column 19)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 24, column 21 to column 28)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 28, column 29 to column 38)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 28, column 40 to column 47)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 29, column 20 to column 29)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 29, column 31 to column 38)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 30, column 11 to column 20)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 30, column 22 to column 29)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 31, column 29 to column 38)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 31, column 40 to column 47)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 32, column 29 to column 38)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 32, column 40 to column 47)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 33, column 20 to column 29)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 33, column 31 to column 38)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 34, column 30 to column 39)",
 " (in '/project/3017083.01/behavioral_study/scripts/matlab_scripts/RescorlaWagnerModel/stan_models/ChemControl_stan_mod07.stan', line 34, column 41 to column 48)"};



class ChemControl_stan_mod07_model final : public model_base_crtp<ChemControl_stan_mod07_model> {

 private:
  int nTrials;
  int nBlocks;
  int nSubjects;
  std::vector<std::vector<std::vector<int>>> state;
  std::vector<std::vector<std::vector<int>>> action;
  std::vector<std::vector<std::vector<int>>> feedback;
  Eigen::Matrix<double, -1, 1> initQ__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> initQ{nullptr, 0};
 
 public:
  ~ChemControl_stan_mod07_model() { }
  
  inline std::string model_name() const final { return "ChemControl_stan_mod07_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  ChemControl_stan_mod07_model(stan::io::var_context& context__,
                               unsigned int random_seed__ = 0,
                               std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "ChemControl_stan_mod07_model_namespace::ChemControl_stan_mod07_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 86;
      context__.validate_dims("data initialization","nTrials","int",
           std::vector<size_t>{});
      nTrials = std::numeric_limits<int>::min();
      
      current_statement__ = 86;
      nTrials = context__.vals_i("nTrials")[(1 - 1)];
      current_statement__ = 86;
      check_greater_or_equal(function__, "nTrials", nTrials, 1);
      current_statement__ = 87;
      context__.validate_dims("data initialization","nBlocks","int",
           std::vector<size_t>{});
      nBlocks = std::numeric_limits<int>::min();
      
      current_statement__ = 87;
      nBlocks = context__.vals_i("nBlocks")[(1 - 1)];
      current_statement__ = 87;
      check_greater_or_equal(function__, "nBlocks", nBlocks, 1);
      current_statement__ = 88;
      context__.validate_dims("data initialization","nSubjects","int",
           std::vector<size_t>{});
      nSubjects = std::numeric_limits<int>::min();
      
      current_statement__ = 88;
      nSubjects = context__.vals_i("nSubjects")[(1 - 1)];
      current_statement__ = 88;
      check_greater_or_equal(function__, "nSubjects", nSubjects, 1);
      current_statement__ = 89;
      validate_non_negative_index("state", "nSubjects", nSubjects);
      current_statement__ = 90;
      validate_non_negative_index("state", "nBlocks", nBlocks);
      current_statement__ = 91;
      validate_non_negative_index("state", "nTrials", nTrials);
      current_statement__ = 92;
      context__.validate_dims("data initialization","state","int",
           std::vector<size_t>{static_cast<size_t>(nSubjects),
            static_cast<size_t>(nBlocks), static_cast<size_t>(nTrials)});
      state = std::vector<std::vector<std::vector<int>>>(nSubjects, std::vector<std::vector<int>>(nBlocks, std::vector<int>(nTrials, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> state_flat__;
        current_statement__ = 92;
        state_flat__ = context__.vals_i("state");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= nTrials; ++sym1__) {
          current_statement__ = 92;
          for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
            current_statement__ = 92;
            for (int sym3__ = 1; sym3__ <= nSubjects; ++sym3__) {
              current_statement__ = 92;
              assign(state, state_flat__[(pos__ - 1)],
                "assigning variable state", index_uni(sym3__),
                                              index_uni(sym2__),
                                              index_uni(sym1__));
              current_statement__ = 92;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 92;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 92;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 92;
          for (int sym3__ = 1; sym3__ <= nTrials; ++sym3__) {
            current_statement__ = 92;
            check_greater_or_equal(function__,
                                   "state[sym1__, sym2__, sym3__]",
                                   state[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 1);
          }
        }
      }
      current_statement__ = 92;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 92;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 92;
          for (int sym3__ = 1; sym3__ <= nTrials; ++sym3__) {
            current_statement__ = 92;
            check_less_or_equal(function__, "state[sym1__, sym2__, sym3__]",
                                state[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)], 4);
          }
        }
      }
      current_statement__ = 93;
      validate_non_negative_index("action", "nSubjects", nSubjects);
      current_statement__ = 94;
      validate_non_negative_index("action", "nBlocks", nBlocks);
      current_statement__ = 95;
      validate_non_negative_index("action", "nTrials", nTrials);
      current_statement__ = 96;
      context__.validate_dims("data initialization","action","int",
           std::vector<size_t>{static_cast<size_t>(nSubjects),
            static_cast<size_t>(nBlocks), static_cast<size_t>(nTrials)});
      action = std::vector<std::vector<std::vector<int>>>(nSubjects, std::vector<std::vector<int>>(nBlocks, std::vector<int>(nTrials, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> action_flat__;
        current_statement__ = 96;
        action_flat__ = context__.vals_i("action");
        current_statement__ = 96;
        pos__ = 1;
        current_statement__ = 96;
        for (int sym1__ = 1; sym1__ <= nTrials; ++sym1__) {
          current_statement__ = 96;
          for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
            current_statement__ = 96;
            for (int sym3__ = 1; sym3__ <= nSubjects; ++sym3__) {
              current_statement__ = 96;
              assign(action, action_flat__[(pos__ - 1)],
                "assigning variable action", index_uni(sym3__),
                                               index_uni(sym2__),
                                               index_uni(sym1__));
              current_statement__ = 96;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 96;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 96;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 96;
          for (int sym3__ = 1; sym3__ <= nTrials; ++sym3__) {
            current_statement__ = 96;
            check_greater_or_equal(function__,
                                   "action[sym1__, sym2__, sym3__]",
                                   action[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], 0);
          }
        }
      }
      current_statement__ = 96;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 96;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 96;
          for (int sym3__ = 1; sym3__ <= nTrials; ++sym3__) {
            current_statement__ = 96;
            check_less_or_equal(function__, "action[sym1__, sym2__, sym3__]",
                                action[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)], 1);
          }
        }
      }
      current_statement__ = 97;
      validate_non_negative_index("feedback", "nSubjects", nSubjects);
      current_statement__ = 98;
      validate_non_negative_index("feedback", "nBlocks", nBlocks);
      current_statement__ = 99;
      validate_non_negative_index("feedback", "nTrials", nTrials);
      current_statement__ = 100;
      context__.validate_dims("data initialization","feedback","int",
           std::vector<size_t>{static_cast<size_t>(nSubjects),
            static_cast<size_t>(nBlocks), static_cast<size_t>(nTrials)});
      feedback = std::vector<std::vector<std::vector<int>>>(nSubjects, std::vector<std::vector<int>>(nBlocks, std::vector<int>(nTrials, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> feedback_flat__;
        current_statement__ = 100;
        feedback_flat__ = context__.vals_i("feedback");
        current_statement__ = 100;
        pos__ = 1;
        current_statement__ = 100;
        for (int sym1__ = 1; sym1__ <= nTrials; ++sym1__) {
          current_statement__ = 100;
          for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
            current_statement__ = 100;
            for (int sym3__ = 1; sym3__ <= nSubjects; ++sym3__) {
              current_statement__ = 100;
              assign(feedback, feedback_flat__[(pos__ - 1)],
                "assigning variable feedback", index_uni(sym3__),
                                                 index_uni(sym2__),
                                                 index_uni(sym1__));
              current_statement__ = 100;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 100;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 100;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 100;
          for (int sym3__ = 1; sym3__ <= nTrials; ++sym3__) {
            current_statement__ = 100;
            check_greater_or_equal(function__,
                                   "feedback[sym1__, sym2__, sym3__]",
                                   feedback[(sym1__ - 1)][(sym2__ - 1)][
                                   (sym3__ - 1)], -1);
          }
        }
      }
      current_statement__ = 100;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 100;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 100;
          for (int sym3__ = 1; sym3__ <= nTrials; ++sym3__) {
            current_statement__ = 100;
            check_less_or_equal(function__,
                                "feedback[sym1__, sym2__, sym3__]",
                                feedback[(sym1__ - 1)][(sym2__ - 1)][
                                (sym3__ - 1)], 1);
          }
        }
      }
      current_statement__ = 101;
      initQ__ = Eigen::Matrix<double, -1, 1>(4);
      new (&initQ) Eigen::Map<Eigen::Matrix<double, -1, 1>>(initQ__.data(), 4);
      stan::math::fill(initQ, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 102;
      assign(initQ, (Eigen::Matrix<double,-1,1>(4) << 0.5, -0.5, 0.5,
        -0.5).finished(), "assigning variable initQ");
      current_statement__ = 103;
      validate_non_negative_index("ep_pr", "nSubjects", nSubjects);
      current_statement__ = 104;
      validate_non_negative_index("ep_pr", "nBlocks", nBlocks);
      current_statement__ = 105;
      validate_non_negative_index("rho_pr", "nSubjects", nSubjects);
      current_statement__ = 106;
      validate_non_negative_index("rho_pr", "nBlocks", nBlocks);
      current_statement__ = 107;
      validate_non_negative_index("goBias_pr", "nSubjects", nSubjects);
      current_statement__ = 108;
      validate_non_negative_index("goBias_pr", "nBlocks", nBlocks);
      current_statement__ = 109;
      validate_non_negative_index("omegaInit_pr", "nSubjects", nSubjects);
      current_statement__ = 110;
      validate_non_negative_index("omegaInit_pr", "nBlocks", nBlocks);
      current_statement__ = 111;
      validate_non_negative_index("alphaO_pr", "nSubjects", nSubjects);
      current_statement__ = 112;
      validate_non_negative_index("alphaO_pr", "nBlocks", nBlocks);
      current_statement__ = 113;
      validate_non_negative_index("betaO_pr", "nSubjects", nSubjects);
      current_statement__ = 114;
      validate_non_negative_index("betaO_pr", "nBlocks", nBlocks);
      current_statement__ = 115;
      validate_non_negative_index("thresO_pr", "nSubjects", nSubjects);
      current_statement__ = 116;
      validate_non_negative_index("thresO_pr", "nBlocks", nBlocks);
      current_statement__ = 117;
      validate_non_negative_index("ep", "nSubjects", nSubjects);
      current_statement__ = 118;
      validate_non_negative_index("ep", "nBlocks", nBlocks);
      current_statement__ = 119;
      validate_non_negative_index("rho", "nSubjects", nSubjects);
      current_statement__ = 120;
      validate_non_negative_index("rho", "nBlocks", nBlocks);
      current_statement__ = 121;
      validate_non_negative_index("goBias", "nSubjects", nSubjects);
      current_statement__ = 122;
      validate_non_negative_index("goBias", "nBlocks", nBlocks);
      current_statement__ = 123;
      validate_non_negative_index("omegaInit", "nSubjects", nSubjects);
      current_statement__ = 124;
      validate_non_negative_index("omegaInit", "nBlocks", nBlocks);
      current_statement__ = 125;
      validate_non_negative_index("alphaO", "nSubjects", nSubjects);
      current_statement__ = 126;
      validate_non_negative_index("alphaO", "nBlocks", nBlocks);
      current_statement__ = 127;
      validate_non_negative_index("betaO", "nSubjects", nSubjects);
      current_statement__ = 128;
      validate_non_negative_index("betaO", "nBlocks", nBlocks);
      current_statement__ = 129;
      validate_non_negative_index("thresO", "nSubjects", nSubjects);
      current_statement__ = 130;
      validate_non_negative_index("thresO", "nBlocks", nBlocks);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 7 + 7 + (nSubjects * nBlocks) + (nSubjects * nBlocks)
       + (nSubjects * nBlocks) + (nSubjects * nBlocks)
       + (nSubjects * nBlocks) + (nSubjects * nBlocks)
       + (nSubjects * nBlocks);
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "ChemControl_stan_mod07_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_pr;
      mu_pr = Eigen::Matrix<local_scalar_t__, -1, 1>(7);
      stan::math::fill(mu_pr, DUMMY_VAR__);
      
      current_statement__ = 1;
      mu_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(7);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
      sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(7);
      stan::math::fill(sigma, DUMMY_VAR__);
      
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, lp__, 7);
      Eigen::Matrix<local_scalar_t__, -1, -1> ep_pr;
      ep_pr = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(ep_pr, DUMMY_VAR__);
      
      current_statement__ = 3;
      ep_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                nSubjects, nBlocks);
      Eigen::Matrix<local_scalar_t__, -1, -1> rho_pr;
      rho_pr = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(rho_pr, DUMMY_VAR__);
      
      current_statement__ = 4;
      rho_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                 nSubjects, nBlocks);
      Eigen::Matrix<local_scalar_t__, -1, -1> goBias_pr;
      goBias_pr = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(goBias_pr, DUMMY_VAR__);
      
      current_statement__ = 5;
      goBias_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    nSubjects, nBlocks);
      Eigen::Matrix<local_scalar_t__, -1, -1> omegaInit_pr;
      omegaInit_pr = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(omegaInit_pr, DUMMY_VAR__);
      
      current_statement__ = 6;
      omegaInit_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                       nSubjects, nBlocks);
      Eigen::Matrix<local_scalar_t__, -1, -1> alphaO_pr;
      alphaO_pr = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(alphaO_pr, DUMMY_VAR__);
      
      current_statement__ = 7;
      alphaO_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    nSubjects, nBlocks);
      Eigen::Matrix<local_scalar_t__, -1, -1> betaO_pr;
      betaO_pr = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(betaO_pr, DUMMY_VAR__);
      
      current_statement__ = 8;
      betaO_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                   nSubjects, nBlocks);
      Eigen::Matrix<local_scalar_t__, -1, -1> thresO_pr;
      thresO_pr = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(thresO_pr, DUMMY_VAR__);
      
      current_statement__ = 9;
      thresO_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    nSubjects, nBlocks);
      Eigen::Matrix<local_scalar_t__, -1, -1> ep;
      ep = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(ep, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> rho;
      rho = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(rho, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> goBias;
      goBias = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(goBias, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> omegaInit;
      omegaInit = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(omegaInit, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> alphaO;
      alphaO = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(alphaO, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> betaO;
      betaO = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(betaO, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> thresO;
      thresO = Eigen::Matrix<local_scalar_t__, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(thresO, DUMMY_VAR__);
      
      current_statement__ = 24;
      for (int s = 1; s <= nSubjects; ++s) {
        current_statement__ = 22;
        for (int b = 1; b <= nBlocks; ++b) {
          current_statement__ = 17;
          assign(ep,
            Phi_approx(
              (rvalue(mu_pr, "mu_pr", index_uni(1)) +
                (rvalue(sigma, "sigma", index_uni(1)) *
                  rvalue(ep_pr, "ep_pr", index_uni(s), index_uni(b))))),
            "assigning variable ep", index_uni(s), index_uni(b));
          current_statement__ = 18;
          assign(omegaInit,
            Phi_approx(
              (rvalue(mu_pr, "mu_pr", index_uni(4)) +
                (rvalue(sigma, "sigma", index_uni(4)) *
                  rvalue(omegaInit_pr, "omegaInit_pr",
                    index_uni(s), index_uni(b))))),
            "assigning variable omegaInit", index_uni(s), index_uni(b));
          current_statement__ = 19;
          assign(alphaO,
            Phi_approx(
              (rvalue(mu_pr, "mu_pr", index_uni(5)) +
                (rvalue(sigma, "sigma", index_uni(5)) *
                  rvalue(alphaO_pr, "alphaO_pr", index_uni(s), index_uni(b))))),
            "assigning variable alphaO", index_uni(s), index_uni(b));
          current_statement__ = 20;
          assign(thresO,
            stan::math::tanh(
              (0.5 *
                (rvalue(mu_pr, "mu_pr", index_uni(7)) +
                  (rvalue(sigma, "sigma", index_uni(7)) *
                    rvalue(thresO_pr, "thresO_pr",
                      index_uni(s), index_uni(b)))))),
            "assigning variable thresO", index_uni(s), index_uni(b));
        }
      }
      current_statement__ = 25;
      assign(rho,
        stan::math::exp(
          add(rvalue(mu_pr, "mu_pr", index_uni(2)),
            multiply(rvalue(sigma, "sigma", index_uni(2)), rho_pr))),
        "assigning variable rho");
      current_statement__ = 26;
      assign(goBias,
        add(rvalue(mu_pr, "mu_pr", index_uni(3)),
          multiply(rvalue(sigma, "sigma", index_uni(3)), goBias_pr)),
        "assigning variable goBias");
      current_statement__ = 27;
      assign(betaO,
        stan::math::exp(
          add(rvalue(mu_pr, "mu_pr", index_uni(5)),
            multiply(rvalue(sigma, "sigma", index_uni(5)), betaO_pr))),
        "assigning variable betaO");
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 10;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 10;
          check_greater_or_equal(function__, "ep[sym1__, sym2__]",
                                 rvalue(ep, "ep",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 10;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 10;
          check_less_or_equal(function__, "ep[sym1__, sym2__]",
                              rvalue(ep, "ep",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 11;
          check_greater_or_equal(function__, "rho[sym1__, sym2__]",
                                 rvalue(rho, "rho",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 13;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 13;
          check_greater_or_equal(function__, "omegaInit[sym1__, sym2__]",
                                 rvalue(omegaInit, "omegaInit",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 13;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 13;
          check_less_or_equal(function__, "omegaInit[sym1__, sym2__]",
                              rvalue(omegaInit, "omegaInit",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 14;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 14;
          check_greater_or_equal(function__, "alphaO[sym1__, sym2__]",
                                 rvalue(alphaO, "alphaO",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 14;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 14;
          check_less_or_equal(function__, "alphaO[sym1__, sym2__]",
                              rvalue(alphaO, "alphaO",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 15;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 15;
          check_greater_or_equal(function__, "betaO[sym1__, sym2__]",
                                 rvalue(betaO, "betaO",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 16;
          check_greater_or_equal(function__, "thresO[sym1__, sym2__]",
                                 rvalue(thresO, "thresO",
                                   index_uni(sym1__), index_uni(sym2__)), 
                                 -1);
        }
      }
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 16;
          check_less_or_equal(function__, "thresO[sym1__, sym2__]",
                              rvalue(thresO, "thresO",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      {
        current_statement__ = 28;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(mu_pr, "mu_pr", index_uni(1)), 0, 1.0));
        current_statement__ = 29;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(mu_pr, "mu_pr", index_uni(2)), 0, 1.0));
        current_statement__ = 30;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(mu_pr, "mu_pr", index_uni(3)), 0,
            10.0));
        current_statement__ = 31;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(mu_pr, "mu_pr", index_uni(4)), 0, 1.0));
        current_statement__ = 32;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(mu_pr, "mu_pr", index_uni(5)), 0, 1.0));
        current_statement__ = 33;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(mu_pr, "mu_pr", index_uni(6)), 0, 1.0));
        current_statement__ = 34;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(mu_pr, "mu_pr", index_uni(7)), 0, 1.0));
        current_statement__ = 35;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(sigma, "sigma", index_uni(1)), 0, 0.2));
        current_statement__ = 36;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(sigma, "sigma", index_uni(2)), 0, 0.2));
        current_statement__ = 37;
        lp_accum__.add(
          cauchy_lpdf<propto__>(rvalue(sigma, "sigma", index_uni(3)), 0, 1.0));
        current_statement__ = 38;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(sigma, "sigma", index_uni(4)), 0, 0.2));
        current_statement__ = 39;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(sigma, "sigma", index_uni(5)), 0, 0.2));
        current_statement__ = 40;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(sigma, "sigma", index_uni(6)), 0, 0.2));
        current_statement__ = 41;
        lp_accum__.add(
          normal_lpdf<propto__>(rvalue(sigma, "sigma", index_uni(7)), 0, 0.2));
        current_statement__ = 85;
        for (int s = 1; s <= nSubjects; ++s) {
          current_statement__ = 42;
          lp_accum__.add(
            normal_lpdf<propto__>(rvalue(ep_pr, "ep_pr", index_uni(s)), 0,
              1.0));
          current_statement__ = 43;
          lp_accum__.add(
            normal_lpdf<propto__>(rvalue(rho_pr, "rho_pr", index_uni(s)), 0,
              1.0));
          current_statement__ = 44;
          lp_accum__.add(
            normal_lpdf<propto__>(
              rvalue(goBias_pr, "goBias_pr", index_uni(s)), 0, 1.0));
          current_statement__ = 45;
          lp_accum__.add(
            normal_lpdf<propto__>(
              rvalue(omegaInit_pr, "omegaInit_pr", index_uni(s)), 0, 1.0));
          current_statement__ = 46;
          lp_accum__.add(
            normal_lpdf<propto__>(
              rvalue(alphaO_pr, "alphaO_pr", index_uni(s)), 0, 1.0));
          current_statement__ = 47;
          lp_accum__.add(
            normal_lpdf<propto__>(rvalue(betaO_pr, "betaO_pr", index_uni(s)),
              0, 1.0));
          current_statement__ = 48;
          lp_accum__.add(
            normal_lpdf<propto__>(
              rvalue(thresO_pr, "thresO_pr", index_uni(s)), 0, 1.0));
          current_statement__ = 83;
          for (int b = 1; b <= nBlocks; ++b) {
            Eigen::Matrix<local_scalar_t__, -1, 1> w_g;
            w_g = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
            stan::math::fill(w_g, DUMMY_VAR__);
            
            Eigen::Matrix<local_scalar_t__, -1, 1> w_ng;
            w_ng = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
            stan::math::fill(w_ng, DUMMY_VAR__);
            
            Eigen::Matrix<local_scalar_t__, -1, 1> q_g;
            q_g = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
            stan::math::fill(q_g, DUMMY_VAR__);
            
            Eigen::Matrix<local_scalar_t__, -1, 1> q_ng;
            q_ng = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
            stan::math::fill(q_ng, DUMMY_VAR__);
            
            Eigen::Matrix<local_scalar_t__, -1, 1> pGo;
            pGo = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
            stan::math::fill(pGo, DUMMY_VAR__);
            
            Eigen::Matrix<local_scalar_t__, -1, 1> sv;
            sv = Eigen::Matrix<local_scalar_t__, -1, 1>(4);
            stan::math::fill(sv, DUMMY_VAR__);
            
            local_scalar_t__ Omega;
            Omega = DUMMY_VAR__;
            
            local_scalar_t__ omega;
            omega = DUMMY_VAR__;
            
            local_scalar_t__ q_pe;
            q_pe = DUMMY_VAR__;
            
            local_scalar_t__ v_pe;
            v_pe = DUMMY_VAR__;
            
            current_statement__ = 59;
            assign(w_g,
              multiply(initQ, rvalue(rho, "rho", index_uni(s), index_uni(b))),
              "assigning variable w_g");
            current_statement__ = 60;
            assign(w_ng,
              multiply(initQ, rvalue(rho, "rho", index_uni(s), index_uni(b))),
              "assigning variable w_ng");
            current_statement__ = 61;
            assign(q_g,
              multiply(initQ, rvalue(rho, "rho", index_uni(s), index_uni(b))),
              "assigning variable q_g");
            current_statement__ = 62;
            assign(q_ng,
              multiply(initQ, rvalue(rho, "rho", index_uni(s), index_uni(b))),
              "assigning variable q_ng");
            current_statement__ = 63;
            assign(sv, initQ, "assigning variable sv");
            current_statement__ = 64;
            Omega = 0;
            current_statement__ = 65;
            omega = rvalue(omegaInit, "omegaInit",
                      index_uni(s), index_uni(b));
            current_statement__ = 81;
            for (int t = 1; t <= nTrials; ++t) {
              current_statement__ = 66;
              assign(w_g,
                ((((1 - omega) *
                    rvalue(q_g, "q_g",
                      index_uni(rvalue(state, "state",
                                  index_uni(s), index_uni(b), index_uni(t)))))
                   + rvalue(goBias, "goBias", index_uni(s), index_uni(b))) +
                  (omega *
                    rvalue(sv, "sv",
                      index_uni(rvalue(state, "state",
                                  index_uni(s), index_uni(b), index_uni(t)))))),
                "assigning variable w_g", index_uni(rvalue(state, "state",
                                                      index_uni(s),
                                                        index_uni(b),
                                                        index_uni(t))));
              current_statement__ = 67;
              assign(w_ng,
                ((1 - omega) *
                  rvalue(q_ng, "q_ng",
                    index_uni(rvalue(state, "state",
                                index_uni(s), index_uni(b), index_uni(t))))),
                "assigning variable w_ng", index_uni(rvalue(state, "state",
                                                       index_uni(s),
                                                         index_uni(b),
                                                         index_uni(t))));
              current_statement__ = 68;
              lp_accum__.add(
                bernoulli_logit_lpmf<propto__>(
                  rvalue(action, "action",
                    index_uni(s), index_uni(b), index_uni(t)),
                  (rvalue(w_g, "w_g",
                     index_uni(rvalue(state, "state",
                                 index_uni(s), index_uni(b), index_uni(t))))
                    -
                    rvalue(w_ng, "w_ng",
                      index_uni(rvalue(state, "state",
                                  index_uni(s), index_uni(b), index_uni(t)))))));
              current_statement__ = 69;
              v_pe = ((rvalue(rho, "rho", index_uni(s), index_uni(b)) *
                        rvalue(feedback, "feedback",
                          index_uni(s), index_uni(b), index_uni(t))) -
                       rvalue(sv, "sv",
                         index_uni(rvalue(state, "state",
                                     index_uni(s), index_uni(b), index_uni(t)))));
              current_statement__ = 70;
              assign(sv,
                (rvalue(sv, "sv",
                   index_uni(rvalue(state, "state",
                               index_uni(s), index_uni(b), index_uni(t)))) +
                  (rvalue(ep, "ep", index_uni(s), index_uni(b)) *
                    ((rvalue(rho, "rho", index_uni(s), index_uni(b)) *
                       rvalue(feedback, "feedback",
                         index_uni(s), index_uni(b), index_uni(t))) -
                      rvalue(sv, "sv",
                        index_uni(rvalue(state, "state",
                                    index_uni(s), index_uni(b), index_uni(t))))))),
                "assigning variable sv", index_uni(rvalue(state, "state",
                                                     index_uni(s),
                                                       index_uni(b),
                                                       index_uni(t))));
              current_statement__ = 77;
              if (rvalue(action, "action",
                    index_uni(s), index_uni(b), index_uni(t))) {
                current_statement__ = 74;
                q_pe = (rvalue(rho, "rho", index_uni(s), index_uni(b)) *
                         rvalue(q_g, "q_g",
                           index_uni(rvalue(state, "state",
                                       index_uni(s), index_uni(b),
                                         index_uni(t)))));
                current_statement__ = 75;
                assign(q_g,
                  (rvalue(q_g, "q_g",
                     index_uni(rvalue(state, "state",
                                 index_uni(s), index_uni(b), index_uni(t))))
                    +
                    (rvalue(ep, "ep", index_uni(s), index_uni(b)) *
                      ((rvalue(rho, "rho", index_uni(s), index_uni(b)) *
                         rvalue(feedback, "feedback",
                           index_uni(s), index_uni(b), index_uni(t))) -
                        rvalue(q_g, "q_g",
                          index_uni(rvalue(state, "state",
                                      index_uni(s), index_uni(b),
                                        index_uni(t))))))),
                  "assigning variable q_g", index_uni(rvalue(state, "state",
                                                        index_uni(s),
                                                          index_uni(b),
                                                          index_uni(t))));
              } else {
                current_statement__ = 71;
                q_pe = (rvalue(rho, "rho", index_uni(s), index_uni(b)) *
                         rvalue(q_ng, "q_ng",
                           index_uni(rvalue(state, "state",
                                       index_uni(s), index_uni(b),
                                         index_uni(t)))));
                current_statement__ = 72;
                assign(q_ng,
                  (rvalue(q_ng, "q_ng",
                     index_uni(rvalue(state, "state",
                                 index_uni(s), index_uni(b), index_uni(t))))
                    +
                    (rvalue(ep, "ep", index_uni(s), index_uni(b)) *
                      ((rvalue(rho, "rho", index_uni(s), index_uni(b)) *
                         rvalue(feedback, "feedback",
                           index_uni(s), index_uni(b), index_uni(t))) -
                        rvalue(q_ng, "q_ng",
                          index_uni(rvalue(state, "state",
                                      index_uni(s), index_uni(b),
                                        index_uni(t))))))),
                  "assigning variable q_ng", index_uni(rvalue(state, "state",
                                                         index_uni(s),
                                                           index_uni(b),
                                                           index_uni(t))));
              }
              current_statement__ = 78;
              Omega = (Omega +
                        (rvalue(alphaO, "alphaO", index_uni(s), index_uni(b))
                          * ((q_pe - v_pe) - Omega)));
              current_statement__ = 79;
              omega = (1 /
                        (1 +
                          stan::math::exp(
                            (-rvalue(betaO, "betaO",
                                index_uni(s), index_uni(b)) *
                              (Omega -
                                rvalue(thresO, "thresO",
                                  index_uni(s), index_uni(b)))))));
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "ChemControl_stan_mod07_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> mu_pr;
      mu_pr = Eigen::Matrix<double, -1, 1>(7);
      stan::math::fill(mu_pr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      mu_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(7);
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(7);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
                0, lp__, 7);
      Eigen::Matrix<double, -1, -1> ep_pr;
      ep_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(ep_pr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      ep_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                nSubjects, nBlocks);
      Eigen::Matrix<double, -1, -1> rho_pr;
      rho_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(rho_pr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      rho_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                 nSubjects, nBlocks);
      Eigen::Matrix<double, -1, -1> goBias_pr;
      goBias_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(goBias_pr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      goBias_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    nSubjects, nBlocks);
      Eigen::Matrix<double, -1, -1> omegaInit_pr;
      omegaInit_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(omegaInit_pr, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 6;
      omegaInit_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                       nSubjects, nBlocks);
      Eigen::Matrix<double, -1, -1> alphaO_pr;
      alphaO_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(alphaO_pr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      alphaO_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    nSubjects, nBlocks);
      Eigen::Matrix<double, -1, -1> betaO_pr;
      betaO_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(betaO_pr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      betaO_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                   nSubjects, nBlocks);
      Eigen::Matrix<double, -1, -1> thresO_pr;
      thresO_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(thresO_pr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      thresO_pr = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(
                    nSubjects, nBlocks);
      Eigen::Matrix<double, -1, -1> ep;
      ep = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(ep, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> rho;
      rho = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(rho, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> goBias;
      goBias = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(goBias, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> omegaInit;
      omegaInit = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(omegaInit, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> alphaO;
      alphaO = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(alphaO, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> betaO;
      betaO = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(betaO, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> thresO;
      thresO = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(thresO, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
        vars__.emplace_back(mu_pr[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(ep_pr, "ep_pr", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(rho_pr, "rho_pr", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(goBias_pr, "goBias_pr",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(omegaInit_pr, "omegaInit_pr",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(alphaO_pr, "alphaO_pr",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(betaO_pr, "betaO_pr",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(thresO_pr, "thresO_pr",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 24;
      for (int s = 1; s <= nSubjects; ++s) {
        current_statement__ = 22;
        for (int b = 1; b <= nBlocks; ++b) {
          current_statement__ = 17;
          assign(ep,
            Phi_approx(
              (rvalue(mu_pr, "mu_pr", index_uni(1)) +
                (rvalue(sigma, "sigma", index_uni(1)) *
                  rvalue(ep_pr, "ep_pr", index_uni(s), index_uni(b))))),
            "assigning variable ep", index_uni(s), index_uni(b));
          current_statement__ = 18;
          assign(omegaInit,
            Phi_approx(
              (rvalue(mu_pr, "mu_pr", index_uni(4)) +
                (rvalue(sigma, "sigma", index_uni(4)) *
                  rvalue(omegaInit_pr, "omegaInit_pr",
                    index_uni(s), index_uni(b))))),
            "assigning variable omegaInit", index_uni(s), index_uni(b));
          current_statement__ = 19;
          assign(alphaO,
            Phi_approx(
              (rvalue(mu_pr, "mu_pr", index_uni(5)) +
                (rvalue(sigma, "sigma", index_uni(5)) *
                  rvalue(alphaO_pr, "alphaO_pr", index_uni(s), index_uni(b))))),
            "assigning variable alphaO", index_uni(s), index_uni(b));
          current_statement__ = 20;
          assign(thresO,
            stan::math::tanh(
              (0.5 *
                (rvalue(mu_pr, "mu_pr", index_uni(7)) +
                  (rvalue(sigma, "sigma", index_uni(7)) *
                    rvalue(thresO_pr, "thresO_pr",
                      index_uni(s), index_uni(b)))))),
            "assigning variable thresO", index_uni(s), index_uni(b));
        }
      }
      current_statement__ = 25;
      assign(rho,
        stan::math::exp(
          add(rvalue(mu_pr, "mu_pr", index_uni(2)),
            multiply(rvalue(sigma, "sigma", index_uni(2)), rho_pr))),
        "assigning variable rho");
      current_statement__ = 26;
      assign(goBias,
        add(rvalue(mu_pr, "mu_pr", index_uni(3)),
          multiply(rvalue(sigma, "sigma", index_uni(3)), goBias_pr)),
        "assigning variable goBias");
      current_statement__ = 27;
      assign(betaO,
        stan::math::exp(
          add(rvalue(mu_pr, "mu_pr", index_uni(5)),
            multiply(rvalue(sigma, "sigma", index_uni(5)), betaO_pr))),
        "assigning variable betaO");
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 10;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 10;
          check_greater_or_equal(function__, "ep[sym1__, sym2__]",
                                 rvalue(ep, "ep",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 10;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 10;
          check_less_or_equal(function__, "ep[sym1__, sym2__]",
                              rvalue(ep, "ep",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 11;
          check_greater_or_equal(function__, "rho[sym1__, sym2__]",
                                 rvalue(rho, "rho",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 13;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 13;
          check_greater_or_equal(function__, "omegaInit[sym1__, sym2__]",
                                 rvalue(omegaInit, "omegaInit",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 13;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 13;
          check_less_or_equal(function__, "omegaInit[sym1__, sym2__]",
                              rvalue(omegaInit, "omegaInit",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 14;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 14;
          check_greater_or_equal(function__, "alphaO[sym1__, sym2__]",
                                 rvalue(alphaO, "alphaO",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 14;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 14;
          check_less_or_equal(function__, "alphaO[sym1__, sym2__]",
                              rvalue(alphaO, "alphaO",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      current_statement__ = 15;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 15;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 15;
          check_greater_or_equal(function__, "betaO[sym1__, sym2__]",
                                 rvalue(betaO, "betaO",
                                   index_uni(sym1__), index_uni(sym2__)), 0);
        }
      }
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 16;
          check_greater_or_equal(function__, "thresO[sym1__, sym2__]",
                                 rvalue(thresO, "thresO",
                                   index_uni(sym1__), index_uni(sym2__)), 
                                 -1);
        }
      }
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= nSubjects; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= nBlocks; ++sym2__) {
          current_statement__ = 16;
          check_less_or_equal(function__, "thresO[sym1__, sym2__]",
                              rvalue(thresO, "thresO",
                                index_uni(sym1__), index_uni(sym2__)), 1);
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            vars__.emplace_back(
              rvalue(ep, "ep", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            vars__.emplace_back(
              rvalue(rho, "rho", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            vars__.emplace_back(
              rvalue(goBias, "goBias", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            vars__.emplace_back(
              rvalue(omegaInit, "omegaInit",
                index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            vars__.emplace_back(
              rvalue(alphaO, "alphaO", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            vars__.emplace_back(
              rvalue(betaO, "betaO", index_uni(sym2__), index_uni(sym1__)));
          }
        }
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            vars__.emplace_back(
              rvalue(thresO, "thresO", index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> mu_pr;
      mu_pr = Eigen::Matrix<double, -1, 1>(7);
      stan::math::fill(mu_pr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_pr_flat__;
        current_statement__ = 1;
        mu_pr_flat__ = context__.vals_r("mu_pr");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
          current_statement__ = 1;
          assign(mu_pr, mu_pr_flat__[(pos__ - 1)],
            "assigning variable mu_pr", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(7);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 2;
        sigma_flat__ = context__.vals_r("sigma");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
          current_statement__ = 2;
          assign(sigma, sigma_flat__[(pos__ - 1)],
            "assigning variable sigma", index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> sigma_free__;
      sigma_free__ = Eigen::Matrix<double, -1, 1>(7);
      stan::math::fill(sigma_free__, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_free__, stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__", index_uni(sym1__));
      }
      Eigen::Matrix<double, -1, -1> ep_pr;
      ep_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(ep_pr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> ep_pr_flat__;
        current_statement__ = 3;
        ep_pr_flat__ = context__.vals_r("ep_pr");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            current_statement__ = 3;
            assign(ep_pr, ep_pr_flat__[(pos__ - 1)],
              "assigning variable ep_pr", index_uni(sym2__),
                                            index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> rho_pr;
      rho_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(rho_pr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> rho_pr_flat__;
        current_statement__ = 4;
        rho_pr_flat__ = context__.vals_r("rho_pr");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            current_statement__ = 4;
            assign(rho_pr, rho_pr_flat__[(pos__ - 1)],
              "assigning variable rho_pr", index_uni(sym2__),
                                             index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> goBias_pr;
      goBias_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(goBias_pr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> goBias_pr_flat__;
        current_statement__ = 5;
        goBias_pr_flat__ = context__.vals_r("goBias_pr");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            current_statement__ = 5;
            assign(goBias_pr, goBias_pr_flat__[(pos__ - 1)],
              "assigning variable goBias_pr", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> omegaInit_pr;
      omegaInit_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(omegaInit_pr, std::numeric_limits<double>::quiet_NaN());
      
      
      {
        std::vector<local_scalar_t__> omegaInit_pr_flat__;
        current_statement__ = 6;
        omegaInit_pr_flat__ = context__.vals_r("omegaInit_pr");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            current_statement__ = 6;
            assign(omegaInit_pr, omegaInit_pr_flat__[(pos__ - 1)],
              "assigning variable omegaInit_pr", index_uni(sym2__),
                                                   index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> alphaO_pr;
      alphaO_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(alphaO_pr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alphaO_pr_flat__;
        current_statement__ = 7;
        alphaO_pr_flat__ = context__.vals_r("alphaO_pr");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            current_statement__ = 7;
            assign(alphaO_pr, alphaO_pr_flat__[(pos__ - 1)],
              "assigning variable alphaO_pr", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> betaO_pr;
      betaO_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(betaO_pr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> betaO_pr_flat__;
        current_statement__ = 8;
        betaO_pr_flat__ = context__.vals_r("betaO_pr");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          current_statement__ = 8;
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            current_statement__ = 8;
            assign(betaO_pr, betaO_pr_flat__[(pos__ - 1)],
              "assigning variable betaO_pr", index_uni(sym2__),
                                               index_uni(sym1__));
            current_statement__ = 8;
            pos__ = (pos__ + 1);
          }
        }
      }
      Eigen::Matrix<double, -1, -1> thresO_pr;
      thresO_pr = Eigen::Matrix<double, -1, -1>(nSubjects, nBlocks);
      stan::math::fill(thresO_pr, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> thresO_pr_flat__;
        current_statement__ = 9;
        thresO_pr_flat__ = context__.vals_r("thresO_pr");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            current_statement__ = 9;
            assign(thresO_pr, thresO_pr_flat__[(pos__ - 1)],
              "assigning variable thresO_pr", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 9;
            pos__ = (pos__ + 1);
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
        vars__.emplace_back(mu_pr[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(ep_pr, "ep_pr", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(rho_pr, "rho_pr", index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(goBias_pr, "goBias_pr",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(omegaInit_pr, "omegaInit_pr",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(alphaO_pr, "alphaO_pr",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(betaO_pr, "betaO_pr",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          vars__.emplace_back(
            rvalue(thresO_pr, "thresO_pr",
              index_uni(sym2__), index_uni(sym1__)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu_pr", "sigma", "ep_pr", "rho_pr",
      "goBias_pr", "omegaInit_pr", "alphaO_pr", "betaO_pr", "thresO_pr",
      "ep", "rho", "goBias", "omegaInit", "alphaO", "betaO", "thresO"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(7)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(7)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)},
      std::vector<size_t>{static_cast<size_t>(nSubjects),
                          static_cast<size_t>(nBlocks)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ep_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "rho_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "goBias_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "omegaInit_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "alphaO_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betaO_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "thresO_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ep" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "goBias" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "omegaInit" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alphaO" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "betaO" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "thresO" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_pr" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= 7; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "ep_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "rho_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "goBias_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "omegaInit_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "alphaO_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "betaO_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "thresO_pr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "ep" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "goBias" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "omegaInit" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "alphaO" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "betaO" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= nBlocks; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= nSubjects; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "thresO" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(7) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(7) + "},\"block\":\"parameters\"},{\"name\":\"ep_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"rho_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"goBias_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"omegaInit_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"alphaO_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"betaO_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"thresO_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"ep\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"goBias\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omegaInit\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alphaO\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"betaO\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"thresO\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu_pr\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(7) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(7) + "},\"block\":\"parameters\"},{\"name\":\"ep_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"rho_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"goBias_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"omegaInit_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"alphaO_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"betaO_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"thresO_pr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"parameters\"},{\"name\":\"ep\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"goBias\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omegaInit\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alphaO\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"betaO\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"},{\"name\":\"thresO\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(nSubjects) + ",\"cols\":" + std::to_string(nBlocks) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}

using stan_model = ChemControl_stan_mod07_model_namespace::ChemControl_stan_mod07_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return ChemControl_stan_mod07_model_namespace::profiles__;
}

#endif


